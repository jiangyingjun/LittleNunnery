apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'org.greenrobot.greendao'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "com.shuai"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        multiDexEnabled true

    }

    signingConfigs {
        debug {


        }
        release {

            storeFile file("jyj.jks")
            storePassword "123456"
            keyAlias "123456"
            keyPassword "123456"

            v2SigningEnabled false


        }

    }

    buildTypes {
        release {

            /**
             * 是否保存崩溃记录。测试发版设置为true,正式设置为false
             */
            buildConfigField "boolean", "isSaveCrashLog", "true"

            minifyEnabled true
            zipAlignEnabled true

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
            /**
             * 是否保存崩溃记录。测试发版设置为true,正式设置为false
             */
            buildConfigField "boolean", "isSaveCrashLog", "true"

        }
    }


    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java', 'src/main/java-gen']
            resources.srcDirs = ['src/main/resources']
            aidl.srcDirs = ['src/main/aidl']
            renderscript.srcDirs = ['src/maom']
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
            jniLibs.srcDir 'src/main/jniLibs'
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }


    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        // 防止在发布的时候出现因MissingTranslation导致Build Failed!
        disable 'MissingTranslation'
    }


    buildscript {
        repositories {
            mavenCentral()
        }

    }




    greendao {
        schemaVersion 2
        daoPackage 'com.shuai.model.gen'
        targetGenDir 'src/main/java'
    }

    packagingOptions {
        exclude 'META-INF/services/com.fasterxml.jackson.core.ObjectCodec'
        exclude 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.properties'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.xml'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.properties'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.xml'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-databind/pom.properties'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-core/pom.properties'
        exclude 'META-INF/maven/com.squareup.okio/okio/pom.xml'
        exclude 'META-INF/maven/com.squareup.okhttp/okhttp/pom.xml'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.properties'
        exclude 'META-INF/maven/com.fasterxml.jackson.core/jackson-annotations/pom.xml'
        exclude 'META-INF/maven/com.wilddog.client/wilddog-core-android/pom.xml'
        exclude 'META-INF/maven/com.wilddog.client/wilddog-core-android/pom.properties'
        exclude 'META-INF/maven/com.wilddog.client/wilddog-auth-android/pom.xml'
        exclude 'META-INF/maven/com.wilddog.client/wilddog-auth-android/pom.properties'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }
    configurations {
        compile.exclude group: "org.json", module: "json"
    }
}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // 控件rx
    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.jakewharton.rxbinding:rxbinding:0.4.0'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'io.reactivex:rxandroid:1.2.1'
    compile 'io.reactivex:rxjava:1.1.6'
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.android.support.constraint:constraint-layout:+'

    //    testCompile 'junit:junit:4.12'
    compile 'com.squareup.retrofit2:converter-scalars:2.0.0'

    //hotfix--tinker

    //optional, help to generate the final application
    provided 'com.tencent.tinker:tinker-android-anno:1.7.11'

    //tinker's main Android lib
    compile 'com.tencent.tinker:tinker-android-lib:1.7.11'
    compile 'org.greenrobot:greendao:3.2.2'
    compile 'org.greenrobot:greendao-generator:3.2.0'

    // Google推荐的图片加载库Glide
    compile 'com.github.bumptech.glide:glide:3.7.+'

    compile 'com.alibaba:fastjson:1.2.39'

    // google的gson
    compile 'com.google.code.gson:gson:2.7'

    // mvp模式的基类
    compile 'com.jude:beam:3.0.1'

    //    /*检测内存泄漏*/

    //    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'

    //    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    //    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    //解决低版本应用方法数爆棚的问题, 目前已经在API 21中提供了通用的解决方案

    //    compile 'com.android.support:multidex:1.0.1'

    //    /*野狗视频*/

    //    compile 'com.wilddog.client:wilddog-video-android:2.0.4'

    //    /*野狗身份认证*/

    //    compile 'com.wilddog.client:wilddog-auth-android:2.0.6'

    /*野狗实时通讯*/

    //    compile 'com.wilddog.client:wilddog-sync-android:2.3.6'

    /*野狗定位*/

    //    compile 'com.wilddog.location:wilddog-location-android:0.1.0'
    compile 'com.android.support:cardview-v7:25.2.0'
//    compile project(':faceppsdk')
    compile 'com.github.FacePlusPlus:MegviiLicMgr-Android-SDK:0.3.0'
    compile 'com.github.FacePlusPlus:MegviiFacepp-Android-SDK:0.4.7'
}

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs 'libs'
    }
}






def bakPath = file("${buildDir}/bakApk/")
//if(!bakPath.isFile()){
//    bakPath.mkdir()
//    println(bakPath.absolutePath+"")
//}

ext {
    tinkerEnabled = false

    //for normal build
    //old apk file to build patch apk
    tinkerOldApkPath = "${bakPath}/app-release-0808-13-54-36.apk"
    //proguard mapping file to build patch apk
    tinkerApplyMappingPath = "${bakPath}/app-debug-1018-17-32-47-mapping.txt"
    //resource R.txt to build patch apk, must input if there is resource changed
    tinkerApplyResourcePath = "${bakPath}/app-debug-1018-17-32-47-R.txt"

    //only use for build all flavor, if not, just ignore this field
    tinkerBuildFlavorDirectory = "${bakPath}/app-1018-17-32-47"

}

def gitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

def getOldApkPath() {
    return hasProperty("OLD_APK") ? OLD_APK : ext.tinkerOldApkPath
}

def getApplyMappingPath() {
    return hasProperty("APPLY_MAPPING") ? APPLY_MAPPING : ext.tinkerApplyMappingPath
}

def getApplyResourceMappingPath() {
    return hasProperty("APPLY_RESOURCE") ? APPLY_RESOURCE : ext.tinkerApplyResourcePath
}

def getTinkerBuildFlavorDirectory() {
    return ext.tinkerBuildFlavorDirectory
}

def buildWithTinker() {
    return hasProperty("TINKER_ENABLE") ? TINKER_ENABLE : ext.tinkerEnabled
}


if (buildWithTinker()) {

    apply plugin: 'com.tencent.tinker.patch'

    tinkerPatch {

        oldApk = getOldApkPath()

        ignoreWarning = true

        useSign = true

        buildConfig {
            /*保持使用old apk的proguard混淆方式，从而减小patch的大小 会影响assemble编译*/
            applyMapping = getApplyMappingPath()
            /*使用old apk的R.txt文件保持ResId,减小patch大小 避免remote view 异常*/
            applyResourceMapping = getApplyResourceMappingPath()

            /*验证基准apktinkerid 是否等于patch的tinkerid*/
            tinkerId = android.defaultConfig.versionName

        }


        dex {
            /**
             * optional，default 'jar'
             * only can be 'raw' or 'jar'. for raw, we would keep its original format
             * for jar, we would repack dexes with zip format.
             * if you want to support below 14, you must use jar
             * or you want to save rom or check quicker, you can use raw mode also
             */
            dexMode = "jar"

            /**
             * necessary，default '[]'
             * what dexes in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             */
            pattern = ["classes*.dex",
                       "assets/secondary-dex-?.jar"]
            /**
             * necessary，default '[]'
             * Warning, it is very very important, loader classes can't change with patch.
             * thus, they will be removed from patch dexes.
             * you must put the following class into main dex.
             * Simply, you should add your own application {@code tinker.sample.android.SampleApplication}
             * own tinkerLoader, and the classes you use in them
             *
             */
            loader = ["com.tencent.tinker.loader.*",
                      //warning, you must change it with your application
                      "com.shuai.SampleApplication"]
//            loader=[]
        }

        lib {
            /**
             * optional，default '[]'
             * what library in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * for library in assets, we would just recover them in the patch directory
             * you can get them in TinkerLoadResult with Tinker
             */
            pattern = ["lib/armeabi/*.so"]
        }

        res {
            /**
             * optional，default '[]'
             * what resource in apk are expected to deal with tinkerPatch
             * it support * or ? pattern.
             * you must include all your resources in apk here,
             * otherwise, they won't repack in the new apk resources.
             */
            pattern = ["res/*", "assets/*", "resources.arsc", "AndroidManifest.xml"]

            /**
             * optional，default '[]'
             * the resource file exclude patterns, ignore add, delete or modify resource change
             * it support * or ? pattern.
             * Warning, we can only use for files no relative with resources.arsc
             */
            ignoreChange = ["assets/sample_meta.txt", "*.png"]

            /**
             * default 100kb
             * for modify resource, if it is larger than 'largeModSize'
             * we would like to use bsdiff algorithm to reduce patch file size
             */
            largeModSize = 100
        }



        packageConfig {
            /**
             * optional，default 'TINKER_ID, TINKER_ID_VALUE' 'NEW_TINKER_ID, NEW_TINKER_ID_VALUE'
             * package meta file gen. path is assets/package_meta.txt in patch file
             * you can use securityCheck.getPackageProperties() in your ownPackageCheck method
             * or TinkerLoadResult.getPackageConfigByName
             * we will get the TINKER_ID from the old apk manifest for you automatic,
             * other config files (such as patchMessage below)is not necessary
             */
            configField("patchMessage", "tinker is sample to use")
            /**
             * just a sample case, you can use such as sdkVersion, brand, channel...
             * you can parse it in the SamplePatchListener.
             * Then you can use patch conditional!
             */
            configField("platform", "all")


            configField("patchVersion", buildConfig.tinkerId)
        }

        sevenZip {
            zipArtifact = "com.tencent.mm:SevenZip:1.1.10"
        }


    }

    List<String> flavors = new ArrayList<>();
    project.android.productFlavors.each { flavor ->
        flavors.add(flavor.name)
    }
    boolean hasFlavors = flavors.size() > 0
    /**
     * bak apk and mapping
     */
    android.applicationVariants.all { variant ->
        /**
         * task type, you want to bak
         */
        def taskName = variant.name
        def date = new Date().format("MMdd-HH-mm-ss")

        tasks.all {
            if ("assemble".equalsIgnoreCase(it.name)) {

                it.doLast {
                    copy {
                        def fileNamePrefix = "${project.name}-${variant.baseName}"
                        def newFileNamePrefix = hasFlavors ? "${fileNamePrefix}" : "${fileNamePrefix}-${date}"

                        def destPath = hasFlavors ? file("${bakPath}/${project.name}-${date}/${variant.flavorName}") : bakPath
                        from variant.outputs.outputFile
                        into destPath
                        rename { String fileName ->
                            fileName.replace("${fileNamePrefix}.apk", "${newFileNamePrefix}.apk")
                        }

                        from "${buildDir}/outputs/mapping/${variant.dirName}/mapping.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("mapping.txt", "${newFileNamePrefix}-mapping.txt")
                        }

                        from "${buildDir}/intermediates/symbols/${variant.dirName}/R.txt"
                        into destPath
                        rename { String fileName ->
                            fileName.replace("R.txt", "${newFileNamePrefix}-R.txt")
                        }
                    }
                }
            }
        }
    }
//    project.afterEvaluate {
//        //sample use for build all flavor for one time
//        if (hasFlavors) {
//            task(tinkerPatchAllFlavorRelease) {
//                group = 'tinker'
//                def originOldPath = getTinkerBuildFlavorDirectory()
//                for (String flavor : flavors) {
//                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Release")
//                    dependsOn tinkerTask
//                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}ReleaseManifest")
//                    preAssembleTask.doFirst {
//                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 15)
//                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release.apk"
//                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-mapping.txt"
//                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-release-R.txt"
//
//
//                    }
//
//                }
//            }
//
//            task(tinkerPatchAllFlavorDebug) {ssjf
//                group = 'tinker'
//                def originOldPath = getTinkerBuildFlavorDirectory()
//                for (String flavor : flavors) {
//                    def tinkerTask = tasks.getByName("tinkerPatch${flavor.capitalize()}Debug")
//                    dependsOn tinkerTask
//                    def preAssembleTask = tasks.getByName("process${flavor.capitalize()}DebugManifest")
//                    preAssembleTask.doFirst {
//                        String flavorName = preAssembleTask.name.substring(7, 8).toLowerCase() + preAssembleTask.name.substring(8, preAssembleTask.name.length() - 13)
//                        project.tinkerPatch.oldApk = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug.apk"
//                        project.tinkerPatch.buildConfig.applyMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-mapping.txt"
//                        project.tinkerPatch.buildConfig.applyResourceMapping = "${originOldPath}/${flavorName}/${project.name}-${flavorName}-debug-R.txt"
//                    }
//
//                }
//            }
//        }
//    }
}
